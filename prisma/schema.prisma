// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  username   String      @unique
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  profile    Profile?
  firstRoom  Room[]      @relation("FirstUserRoom")
  secondRoom Room[]      @relation("SecondUserRoom")
  roomChat   RoomChat[]
  member     Member[]
  groupChat  GroupChat[]
}

model Profile {
  id        String   @id @default(uuid())
  photo     String   @default("/profile.jpg")
  bio       String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  id           String     @id @default(uuid())
  firstUserId  String
  secondUserId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  firstUser    User       @relation("FirstUserRoom", fields: [firstUserId], references: [id], onDelete: Cascade)
  secondUser   User       @relation("SecondUserRoom", fields: [secondUserId], references: [id], onDelete: Cascade)
  roomChat     RoomChat[]
}

enum Status {
  sent
  read
}

model RoomChat {
  id        String   @id @default(uuid())
  senderId  String
  message   String
  mediaUrl  String
  status    Status   @default(sent)
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Group {
  id          String      @id @default(uuid())
  name        String
  photo       String      @default("/group.jpg")
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  member      Member[]
  groupChat   GroupChat[]
}

model Member {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model GroupChat {
  id        String   @id @default(uuid())
  senderId  String
  message   String
  mediaUrl  String
  status    Status   @default(sent)
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
